class Maps{constructor(){this.list=[{levelID:1,map:[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]],player:{position:{row:2,cell:3}},interactables:{pushBlocks:[{type:"default",position:{row:2,cell:2}}]}}]}getByLevelID(e){for(let t of this.list)if(t.levelID===e)return t}}class Tiles{constructor(){this.mapTiles=[{id:0,name:"floor",colour:"#ddd",obstructs:!1},{id:1,name:"wall",colour:"#999",obstructs:!0}],this.playerTiles=[{id:0,name:"rover",colour:"#000",obstructs:!0}],this.pushBlockTiles=[{id:0,name:"block",colour:"#c90",obstructs:!0}]}getByID(e,t){switch(e){case"map":return this.getMapTileByID(t);case"pushBlock":return this.getPushBlockTileByID(t)}}getMapTileByID(e){for(let t of this.mapTiles)if(t.id===e)return t}getPushBlockTileByID(e){for(let t of this.pushBlockTiles)if(t.id===e)return t}getPlayerTile(e=0){for(let t of this.playerTiles)if(t.id===e)return t}}class PushBlockTypes{constructor(){this.list=[{id:0,name:"default",tileID:0}]}getByName(e){for(let t of this.list)if(t.name===e)return t}}class MoveEntry{constructor(e,t,i,s,l,o,r,a,h,c){this.id=e,this.frame=t,this.entityType=i,this.entityID=s,this.fromRow=l,this.fromCell=o,this.toRow=r,this.toCell=a,this.speed=h,this.queued=c}}class Move{constructor(e){this.game=e,this.list=[]}add(e,t,i,s,l,o,r){if(i===l&&s===o)return!1;if(i!==l&&s!==o)return!1;var a=!1;this.isMoving(e,t)&&(a=!0);var h=this.list.length,c=new MoveEntry(h,this.game.tickFrame,e,t,i,s,l,o,r,a);this.list.push(c)}getCurrentPosition(e,t){var i=this.getEarliestMovement(e,t);if(void 0===i)return!1;var s=this.game.tickFrame-i.frame,l=i.speed*s;return l+i.speed>=100&&this.removeEntry(i.id),{fromRow:i.fromRow,fromCell:i.fromCell,toRow:i.toRow,toCell:i.toCell,percentage:l}}isMoving(e,t){return!1!==this.getCurrentPosition(e,t)}getEarliestMovement(e,t){for(let i of this.list)if(i.entityType===e&&i.entityID===t)return i}unqueueEarliestMovement(e,t){for(let i of this.list)if(i.entityType===e&&i.entityID===t&&!0===i.queued)return i.queued=!1,i.frame=this.game.tickFrame,!0}removeEntry(e){for(var t=0;t<this.list.length;t++){var i=this.list[t];if(i.id==e)return this.list.splice(t,1),this.unqueueEarliestMovement(i.entityType,i.entityID),!0}}}class Level{constructor(e,t=1){this.game=e,this.map=this.game.maps.getByLevelID(t)}locationAvailable(e,t){return!!this.locationExists(e,t)&&!this.getMapTile(e,t).obstructs}locationExists(e,t){return void 0!==this.map.map[e]&&void 0!==this.map.map[e][t]}getMapTile(e,t){if(!this.locationExists(e,t))return!1;var i=this.map.map[e][t];return this.game.tiles.getByID("map",i)}getNextAvailablePositionForDirection(e,t,i){var s=t,l=i;switch(e){case"up":t-=1;break;case"down":t+=1;break;case"left":i-=1;break;case"right":i+=1}return this.locationAvailable(t,i)?{row:t,cell:i}:{row:s,cell:l}}}class Player{constructor(e){this.game=e,this.position={row:e.level.map.player.position.row,cell:e.level.map.player.position.cell},this.speed=30}move(e){var t,i=this.game.level.getNextAvailablePositionForDirection(e,this.position.row,this.position.cell);if(i.row===this.position.row&&i.cell===this.position.cell)return!1;(t=this.game.pushBlocks.getBlockByLocation(i.row,i.cell))?this.game.pushBlocks.moveBlock(e,t.id)&&(this.game.move.add("player",0,this.position.row,this.position.cell,i.row,i.cell,this.speed),this.position.row=i.row,this.position.cell=i.cell):(this.game.move.add("player",0,this.position.row,this.position.cell,i.row,i.cell,this.speed),this.position.row=i.row,this.position.cell=i.cell)}}class PushBlock{constructor(e,t,i,s){this.id=e,this.row=t,this.cell=i,this.tile=s}}class PushBlocks{constructor(e){this.game=e,this.list=[];for(let e of this.game.level.map.interactables.pushBlocks)this.add(e.type,e.position.row,e.position.cell)}add(e,t,i){var s=this.list.length,l=this.game.pushBlockTypes.getByName(e),o=this.game.tiles.getByID("pushBlock",l.tileID),r=new PushBlock(s,t,i,o);this.list.push(r)}getBlockByLocation(e,t){for(let i of this.list)if(i.row===e&&i.cell===t)return i}moveBlock(e,t){for(let s of this.list)if(s.id===t){var i=this.game.level.getNextAvailablePositionForDirection(e,s.row,s.cell);return(i.row!==s.row||i.cell!==s.cell)&&(!this.getBlockByLocation(i.row,i.cell)&&(this.game.move.add("pushBlock",s.id,s.row,s.cell,i.row,i.cell,this.game.player.speed),s.row=i.row,s.cell=i.cell,!0))}return!1}}class Controls{constructor(e){this.game=e,this.listen()}listen(){var e=this;window.addEventListener("keydown",function(t){e.keyDown(t)})}keyDown(e){switch(e.key.toUpperCase()){case"W":this.game.player.move("up");break;case"S":this.game.player.move("down");break;case"A":this.game.player.move("left");break;case"D":this.game.player.move("right")}}}class Canvas{constructor(e){this.game=e,this.tileSize=64,this.c=document.getElementById("canvas"),this.ctx=this.c.getContext("2d"),this.setDimensions()}setDimensions(){this.c.height=this.c.clientHeight,this.c.width=this.c.clientWidth}drawFrame(){this.drawLevel(),this.drawPlayer()}drawLevel(){this.drawMap(),this.drawPushBlocks()}drawPlayer(){var e=this.game.tiles.getPlayerTile(),t=this.game.player.position.row*this.tileSize,i=this.game.player.position.cell*this.tileSize,s=this.game.move.getCurrentPosition("player",0);if(!1!==s){t=s.toRow*this.tileSize,i=s.toCell*this.tileSize;if(s.fromRow!==s.toRow){var l=s.fromRow*this.tileSize;t=l>s.toRow*this.tileSize?l-this.tileSize/100*s.percentage:l+this.tileSize/100*s.percentage}else{var o=s.fromCell*this.tileSize;i=o>s.toCell*this.tileSize?o-this.tileSize/100*s.percentage:o+this.tileSize/100*s.percentage}}this.drawTile(e.colour,t,i)}drawMap(){for(var e=this.game.level.map,t=0;t<e.map.length;t++)for(var i=e.map[t],s=0;s<i.length;s++){var l=i[s];this.drawMapTile(l,t,s)}}drawPushBlocks(){for(let o of this.game.pushBlocks.list){var e=o.row*this.tileSize,t=o.cell*this.tileSize,i=this.game.move.getCurrentPosition("pushBlock",o.id);if(!1!==i){e=i.toRow*this.tileSize,t=i.toCell*this.tileSize;if(i.fromRow!==i.toRow){var s=i.fromRow*this.tileSize;e=s>i.toRow*this.tileSize?s-this.tileSize/100*i.percentage:s+this.tileSize/100*i.percentage}else{var l=i.fromCell*this.tileSize;t=l>i.toCell*this.tileSize?l-this.tileSize/100*i.percentage:l+this.tileSize/100*i.percentage}}this.drawTile(o.tile.colour,e,t)}}drawMapTile(e,t,i){if(void 0===e)return!1;var s=this.game.tiles.getByID("map",e),l=t*this.tileSize,o=i*this.tileSize;this.drawTile(s.colour,l,o)}drawTile(e,t,i){this.ctx.fillStyle=e,this.ctx.fillRect(i,t,this.tileSize,this.tileSize)}}class Game{constructor(){this.maps=new Maps,this.tiles=new Tiles,this.pushBlockTypes=new PushBlockTypes,this.move=new Move(this),this.level=new Level(this),this.player=new Player(this),this.pushBlocks=new PushBlocks(this),this.controls=new Controls(this),this.canvas=new Canvas(this),this.tickFrame=0}run(){var e=this;this.loop=setInterval(function(){e.tick()},42)}tick(){this.tickFrame++,this.canvas.drawFrame()}}var game=new Game;game.run();